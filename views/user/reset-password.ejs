<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <title>Reset Password</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .reset-container {
            background: white;
            padding: 40px;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 450px;
            position: relative;
            overflow: hidden;
        }

        .reset-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #667eea, #764ba2);
        }

        .reset-header {
            text-align: center;
            margin-bottom: 30px;
        }

        .reset-header h1 {
            color: #333;
            font-size: 28px;
            margin-bottom: 10px;
            font-weight: 600;
        }

        .reset-header p {
            color: #666;
            font-size: 14px;
            line-height: 1.5;
        }

        .form-group {
            margin-bottom: 25px;
            position: relative;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #333;
            font-weight: 500;
            font-size: 14px;
        }

        .form-group input {
            width: 100%;
            padding: 15px;
            border: 2px solid #e1e5e9;
            border-radius: 12px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }

        .form-group input:focus {
            outline: none;
            border-color: #667eea;
            background: white;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            transform: translateY(-1px);
        }



        .error-message {
            color: #ef4444;
            font-size: 13px;
            margin-top: 5px;
            display: none;
        }

        .submit-btn {
            width: 100%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px;
            border: none;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
        }

        .submit-btn:active {
            transform: translateY(0);
        }

        .submit-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .success-message {
            background: #22c55e;
            color: white;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            margin-bottom: 20px;
            display: none;
        }

        @media (max-width: 480px) {
            .reset-container {
                padding: 30px 20px;
                margin: 10px;
            }
            
            .reset-header h1 {
                font-size: 24px;
            }
        }

        .show-password {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: #666;
            cursor: pointer;
            font-size: 14px;
            padding: 5px;
        }

        .show-password:hover {
            color: #333;
        }
    </style>
</head>
<body>
    <div class="reset-container">
        <div class="reset-header">
            <h1>Reset Password</h1>
            <p>Create a new secure password for your account</p>
        </div>

        <div class="success-message" id="successMessage">
            Password reset successfully! Redirecting to login...
        </div>

        <form id="resetPasswordForm" action="/reset-password" method="POST">
            <div class="form-group">
                <label for="password">New Password</label>
                <div style="position: relative;">
                    <input type="password" id="password" name="password" placeholder="Enter your new password" required>
                    <button type="button" class="show-password" onclick="togglePassword('password')">Show</button>
                </div>
                <div class="error-message" id="passwordError"></div>
                

            </div>

            <div class="form-group">
                <label for="confirmPassword">Confirm Password</label>
                <div style="position: relative;">
                    <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm your new password" required>
                    <button type="button" class="show-password" onclick="togglePassword('confirmPassword')">Show</button>
                </div>
                <div class="error-message" id="confirmPasswordError"></div>
            </div>

            <button type="submit" class="submit-btn" id="submitBtn">Reset Password</button>
        </form>
    </div>

    <script>
        const passwordInput = document.getElementById('password');
        const confirmPasswordInput = document.getElementById('confirmPassword');
        const submitBtn = document.getElementById('submitBtn');
        const form = document.getElementById('resetPasswordForm');

        // Password requirements elements

        // Error message elements
        const passwordError = document.getElementById('passwordError');
        const confirmPasswordError = document.getElementById('confirmPasswordError');
        const successMessage = document.getElementById('successMessage');

        function togglePassword(inputId) {
            const input = document.getElementById(inputId);
            const button = input.nextElementSibling;
            
            if (input.type === 'password') {
                input.type = 'text';
                button.textContent = 'Hide';
            } else {
                input.type = 'password';
                button.textContent = 'Show';
            }
        }

        function validatePassword(password) {
            const hasMinLength = password.length >= 8;
            const hasDigit = /\d/.test(password);
            const hasLetter = /[a-zA-Z]/.test(password);

            return hasMinLength && hasDigit && hasLetter;
        }

        function validateForm() {
            const password = passwordInput.value;
            const confirmPassword = confirmPasswordInput.value;
            
            let isValid = true;

            // Reset error messages
            passwordError.style.display = 'none';
            confirmPasswordError.style.display = 'none';

            // Validate password
            if (!validatePassword(password)) {
                isValid = false;
                if (password) {
                    passwordError.textContent = 'Password must be at least 8 characters and contain both letters and digits';
                    passwordError.style.display = 'block';
                }
            }

            // Validate password confirmation
            if (confirmPassword && password !== confirmPassword) {
                confirmPasswordError.textContent = 'Passwords do not match';
                confirmPasswordError.style.display = 'block';
                isValid = false;
            }

            // Enable/disable submit button
            submitBtn.disabled = !isValid || !password || !confirmPassword;
            
            return isValid;
        }

        // Real-time validation
        passwordInput.addEventListener('input', validateForm);
        confirmPasswordInput.addEventListener('input', validateForm);

        // Form submission
        // form.addEventListener('submit', function(e) {
        //     e.preventDefault();
            
        //     if (validateForm()) {
        //         // Simulate form submission
        //         submitBtn.textContent = 'Resetting...';
        //         submitBtn.disabled = true;
                
        //         setTimeout(() => {
        //             form.style.display = 'none';
        //             successMessage.style.display = 'block';
                    
        //             // In a real application, you would submit the form data here
        //             setTimeout(() => {
        //                 // Redirect to login page
        //                 window.location.href = '/login';
        //             }, 2000);
        //         }, 1500);
        //     }
        // });

    form.addEventListener('submit', async function(e) {
    e.preventDefault();

    // Initial validation
    if (!validateForm()) {
        Swal.fire({
            icon: 'warning',
            title: 'Validation Failed',
            text: 'Please fill in all required fields correctly!',
            confirmButtonColor: '#3085d6'
        });
        return;
    }

    const password = passwordInput.value;
    const confirmPassword = confirmPasswordInput.value;

    submitBtn.textContent = 'Resetting...';
    submitBtn.disabled = true;

    try {
        const response = await fetch('/reset-password', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ password, confirmPassword }),
        });

        const data = await response.json();

        if (data.success) {
            // ✅ Success alert
            Swal.fire({
                icon: 'success',
                title: 'Password Reset Successful!',
                text: 'Redirecting you to login...',
                showConfirmButton: false,
                timer: 2000
            }).then(() => {
                window.location.href = '/';
            });
        } else {
            // ❌ Error alert from server
            Swal.fire({
                icon: 'error',
                title: 'Reset Failed',
                text: data.message || 'Something went wrong. Please try again.',
                confirmButtonColor: '#d33'
            });
        }
    } catch (error) {
        // ❌ Unexpected error alert
        console.error('Error resetting password:', error);
        Swal.fire({
            icon: 'error',
            title: 'Unexpected Error',
            text: 'An error occurred while resetting your password. Please try again later.',
            confirmButtonColor: '#d33'
        });
    } finally {
        submitBtn.textContent = 'Reset Password';
        submitBtn.disabled = false;
    }
});


        // Initial validation
        validateForm();
    </script>
</body>
</html>